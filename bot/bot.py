import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
import logging
from os import getenv
from src.event_times_maker import event_maker


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ª—É—á—à–µ –∏–∑ .env, –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî –ø—Ä—è–º–æ –∑–¥–µ—Å—å)
load_dotenv()

BOT_TOKEN = getenv("BOT_TOKEN")
# –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º—ë–Ω —Å–æ–±—ã—Ç–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–ß:–ú–ú")
EVENT_TIMES = ["12:40", "17:28", "23:50"]

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {(–¥–∞—Ç–∞, –≤—Ä–µ–º—è_—Å–æ–±—ã—Ç–∏—è), ...}
sent_notifications = set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# –ú–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –∏–∑ –ë–î
NOTIFIED_USERS = set()

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ø–æ–¥–ø–∏—Å–∞–ª—Å—è" –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    NOTIFIED_USERS.add(user_id)
    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏–π.")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
async def notification_scheduler(event_times):
    while True:
        now = datetime.now()
        today = now.date()
        tomorrow = today + timedelta(days=1)

        for time_str in event_times:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
            target_time = datetime.strptime(time_str, "%H:%M").time()

            # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
            candidate_today = datetime.combine(today, target_time)
            candidate_tomorrow = datetime.combine(tomorrow, target_time)

            # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
            if candidate_today > now:
                event_dt = candidate_today
            else:
                event_dt = candidate_tomorrow

            notify_time = event_dt - timedelta(minutes=10)
            notification_key = (event_dt.date(), time_str)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ
            if notify_time <= now < event_dt and notification_key not in sent_notifications:
                sent_notifications.add(notification_key)
                for user_id in NOTIFIED_USERS:
                    try:
                        await bot.send_message(
                            user_id,
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–°–æ–±—ã—Ç–∏–µ –Ω–∞—á–Ω—ë—Ç—Å—è –≤ {time_str}."
                        )
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(5)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    event_times = event_maker()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(notification_scheduler(event_times))
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)