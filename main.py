import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from icalendar import Calendar
from datetime import datetime, date
import pytz
from dateutil.rrule import rrulestr
import requests
from dotenv import load_dotenv
from os import getenv

load_dotenv()
# —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = getenv("BOT_TOKEN")
CALENDAR_URL = getenv("CALENDAR_URL")

def plural(n):
    if n % 10 == 1 and n % 100 != 11:
        return "—Å–æ–±—ã—Ç–∏–µ"
    elif 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
        return "—Å–æ–±—ã—Ç–∏—è"
    else:
        return "—Å–æ–±—ã—Ç–∏–π"

def sort_key(event):
    if event['is_all_day']:
        # –°–æ–±—ã—Ç–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å ‚Äî –≤ –Ω–∞—á–∞–ª–æ (–≤—Ä–µ–º—è 00:00 –±–µ–∑ tz)
        return (0, datetime.min)
    else:
        dt = event['start']
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ naive, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if dt.tzinfo is not None:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ naive, —É–±–∏—Ä–∞—è tzinfo (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏)
            return (1, dt.replace(tzinfo=None))
        else:
            return (1, dt)


def get_todays_events(calendar_data):
    tz = pytz.timezone('Europe/Moscow')
    today = date.today()

    cal = calendar_data

    events_today = []


    for event in cal.walk('VEVENT'):
        summary = str(event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')).strip()
        location = str(event.get('location', '')).strip()
        dtstart = event.get('dtstart')
        if not dtstart:
            continue

        # –°–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "6 –Ω–µ–¥–µ–ª—è")
        if dtstart.params.get('VALUE') == 'DATE':
            event_date = dtstart.dt
            if isinstance(event_date, date) and event_date == today:
                events_today.append({
                    'summary': summary,
                    'location': location,
                    'start': None,
                    'is_all_day': True
                })
            continue

        # –°–æ–±—ã—Ç–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        start_dt = dtstart.dt
        if not isinstance(start_dt, datetime):
            continue

        rrule_prop = event.get('rrule')
        exdates = event.get('exdate')
        exdate_set = set()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ EXDATE (–∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –¥–∞—Ç)
        if exdates:
            exdate_list = exdates if isinstance(exdates, list) else [exdates]
            for exd in exdate_list:
                for dt in exd.dts:
                    d = dt.dt
                    exdate_set.add(d.date() if isinstance(d, datetime) else d)

        if not rrule_prop:
            # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            if start_dt.date() == today:
                events_today.append({
                    'summary': summary,
                    'location': location,
                    'start': start_dt,
                    'is_all_day': False
                })
        else:
            # –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ
            try:
                rrule_str = event['rrule'].to_ical().decode('utf-8')
                rule = rrulestr(rrule_str, dtstart=start_dt)
                for occ in rule:
                    occ_date = occ.date()
                    if occ_date > date(2025, 12, 31):  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–µ–º–µ—Å—Ç—Ä–∞
                        break
                    if occ_date == today and occ_date not in exdate_set:
                        events_today.append({
                            'summary': summary,
                            'location': location,
                            'start': occ,
                            'is_all_day': False
                        })
                        break
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RRULE –¥–ª—è '{summary}': {e}")


    return events_today


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def get_schedule_today():
    try:
        response = requests.get(CALENDAR_URL)
        response.raise_for_status()
        calendar_data = Calendar.from_ical(response.text)
        events = get_todays_events(calendar_data)
        return events
    except Exception as e:
        return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}"]

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ /schedule, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

@dp.message(Command("schedule"))
async def cmd_schedule(message: types.Message):
    await message.answer("–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
    events = get_schedule_today()
    if events:
        word = plural(len(events))
        print(f"–°–µ–≥–æ–¥–Ω—è ({date.today()}) —É –≤–∞—Å {len(events)} {word}:")
        for ev in events:
            if ev['is_all_day']:
                ...
            else:
                start_time = ev['start'].strftime('%H:%M')
                await message.answer(f"  üïí {start_time} ‚Äî {ev['summary']} | {ev['location']}")
    else:
        print("–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())